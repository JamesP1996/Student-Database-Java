/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package studentdatabase;
import java.sql.*;
import javax.swing.JOptionPane;

/**
 *
 * @author IceFox
 */
public class AdvancedRecords extends javax.swing.JFrame {
        String url = "jdbc:mysql://127.0.0.1:3306/";
       String dbName = "studentresultdb";
       String driver = "com.mysql.jdbc.Driver";
       String userName = "root";
       String password = "root";

    /**
     * Creates new form AdvancedRecords
     */
    public AdvancedRecords() {
        initComponents();
    }
       

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        list = new java.awt.List();
        jButton1 = new javax.swing.JButton();
        StuFail = new javax.swing.JButton();
        closebt = new javax.swing.JButton();
        WExams = new javax.swing.JButton();
        StuCollege = new javax.swing.JButton();
        StuCourse = new javax.swing.JButton();
        StuPass = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        list.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        getContentPane().add(list, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 20, 370, 310));

        jButton1.setText("How many Students are in a specific ClassGroup");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 380, -1));

        StuFail.setText("Which Students are Failing a specific Module");
        StuFail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StuFailActionPerformed(evt);
            }
        });
        getContentPane().add(StuFail, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 380, -1));

        closebt.setText("Close");
        closebt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closebtActionPerformed(evt);
            }
        });
        getContentPane().add(closebt, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 340, -1, -1));

        WExams.setText("What Exams has a Student Taken");
        WExams.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WExamsActionPerformed(evt);
            }
        });
        getContentPane().add(WExams, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 380, -1));

        StuCollege.setText("How Many Students are in the College");
        StuCollege.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StuCollegeActionPerformed(evt);
            }
        });
        getContentPane().add(StuCollege, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 380, -1));

        StuCourse.setText("How Many Students in Each Course");
        StuCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StuCourseActionPerformed(evt);
            }
        });
        getContentPane().add(StuCourse, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 380, -1));

        StuPass.setText("Which Students are passing a specific Module");
        StuPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StuPassActionPerformed(evt);
            }
        });
        getContentPane().add(StuPass, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 380, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/studentdatabase/ch.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 840, 390));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void WExamsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WExamsActionPerformed
           try {
               
              String input =  JOptionPane.showInputDialog(rootPane, "Input StudentID", DISPOSE_ON_CLOSE);
              
              list.clear();
            // load the driver into memory
            Class.forName(driver).newInstance();
            // create a connection. The first command line parameter is assumed to
            // be the MDB file in which data tables are held
            System.out.println("Connecting to the Database " + dbName + "....");
            Connection conn = DriverManager.getConnection(url + dbName, userName, password);
            System.out.println("Database Connection Successful");
           

            String sql = "Select ModuleID From Exam Where StudentID = ?";
            PreparedStatement prest = conn.prepareStatement(sql);
            prest.setString(1,input );
            ResultSet rs = prest.executeQuery();

            // replacing the ? with the Title

            
            
            while (rs.next()) {
                // Adding requested data to the listbox in a side by side order
                list.add(("Student has taken Exam in ModuleID= "+ rs.getObject(1)+ "   "));
            }

            // execute a query

            // close the objects
            rs.close();
            prest.close();
            conn.close();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_WExamsActionPerformed

    private void closebtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closebtActionPerformed
        dispose();
    }//GEN-LAST:event_closebtActionPerformed

    private void StuCollegeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StuCollegeActionPerformed
          try {
               
             
              list.clear();
            // load the driver into memory
            Class.forName(driver).newInstance();
            // create a connection. The first command line parameter is assumed to
            // be the MDB file in which data tables are held
            System.out.println("Connecting to the Database " + dbName + "....");
            Connection conn = DriverManager.getConnection(url + dbName, userName, password);
            System.out.println("Database Connection Successful");
           

            Statement stmt = conn.createStatement();
            
            
            ResultSet rs = stmt.executeQuery("SELECT COUNT(StudentID) FROM student");
            // replacing the ? with the Title

            
            
            while (rs.next()) {
                // Adding requested data to the listbox in a side by side order
                list.add(("The Amount of Students in The College = "+ rs.getObject(1)+ "   "));
            }

            // execute a query

            // close the objects
            rs.close();
            stmt.close();
            conn.close();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_StuCollegeActionPerformed

    private void StuCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StuCourseActionPerformed
           try {
               
             
              
              list.clear();
            // load the driver into memory
            Class.forName(driver).newInstance();
            // create a connection. The first command line parameter is assumed to
            // be the MDB file in which data tables are held
            System.out.println("Connecting to the Database " + dbName + "....");
            Connection conn = DriverManager.getConnection(url + dbName, userName, password);
            System.out.println("Database Connection Successful");
           

            
            Statement stmt = conn.createStatement();
            
            ResultSet rs = stmt.executeQuery("SELECT student.CourseID , COUNT(Course.CourseID) AS TotalStudents FROM student LEFT JOIN Course ON student.CourseID = Course.CourseID GROUP BY student.CourseID");
            // replacing the ? with the Title

            
            
            while (rs.next()) {
                // Adding requested data to the listbox in a side by side order
                list.add(("CourseID =  "+ rs.getObject(1)+ " Total Students in This Course = " + rs.getObject(2)));
            }

            // execute a query

            // close the objects
            rs.close();
            stmt.close();
            conn.close();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_StuCourseActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       try {
               
              String input =  JOptionPane.showInputDialog(rootPane, "Input ClassGroup ID", DISPOSE_ON_CLOSE);
              
              list.clear();
            // load the driver into memory
            Class.forName(driver).newInstance();
            // create a connection. The first command line parameter is assumed to
            // be the MDB file in which data tables are held
            System.out.println("Connecting to the Database " + dbName + "....");
            Connection conn = DriverManager.getConnection(url + dbName, userName, password);
            System.out.println("Database Connection Successful");
           

            String sql = "SELECT COUNT(StudentID) FROM STUDENT WHERE CLASS_GROUP = ? ;";
            PreparedStatement prest = conn.prepareStatement(sql);
            prest.setString(1,input );
            ResultSet rs = prest.executeQuery();

            // replacing the ? with the Title

            
            
            while (rs.next()) {
                // Adding requested data to the listbox in a side by side order
                list.add(("There is = "+ rs.getObject(1)+ " Students in this ClassGroup  "));
            }

            // execute a query

            // close the objects
            rs.close();
            prest.close();
            conn.close();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void StuPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StuPassActionPerformed
    try {
               
              String input =  JOptionPane.showInputDialog(rootPane, "Input Module ID", DISPOSE_ON_CLOSE);
              
              list.clear();
            // load the driver into memory
            Class.forName(driver).newInstance();
            // create a connection. The first command line parameter is assumed to
            // be the MDB file in which data tables are held
            System.out.println("Connecting to the Database " + dbName + "....");
            Connection conn = DriverManager.getConnection(url + dbName, userName, password);
            System.out.println("Database Connection Successful");
           

            String SQL = "Select Student.Student_Name,Exam.StudentID,Exam.ModuleID,Exam.Assessment1,Exam.Assessment2,Exam.Assessment3\n" +
"FROM Exam,Student\n" +
"WHERE Exam.ModuleID = ? AND  Student.StudentID = Exam.StudentID AND Exam.Assessment1+Assessment2+Assessment3 >= '150' \n" +
"ORDER BY Student.Student_Name";
            
            PreparedStatement prest = conn.prepareStatement(SQL);
            
            prest.setString(1,input);
            
            ResultSet rs = prest.executeQuery();
            
           
           

            
            
            while  (rs.next()) {
                 {
            
                 list.add(("Student ID "+ rs.getObject(2)+ " " + rs.getObject(1) + " Passed ModuleID = " + rs.getObject(3)));
                 
                
            
            
            }

                
                
            }

            // execute a query

            // close the objects
            rs.close();
            prest.close();
            conn.close();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_StuPassActionPerformed

    private void StuFailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StuFailActionPerformed
        try {
               
              String input =  JOptionPane.showInputDialog(rootPane, "Input Module ID", DISPOSE_ON_CLOSE);
              
              list.clear();
            // load the driver into memory
            Class.forName(driver).newInstance();
            // create a connection. The first command line parameter is assumed to
            // be the MDB file in which data tables are held
            System.out.println("Connecting to the Database " + dbName + "....");
            Connection conn = DriverManager.getConnection(url + dbName, userName, password);
            System.out.println("Database Connection Successful");
           

            String SQL = "Select Student.Student_Name,Exam.StudentID,Exam.ModuleID,Exam.Assessment1,Exam.Assessment2,Exam.Assessment3\n" +
"FROM Exam,Student\n" +
"WHERE Exam.ModuleID = ? AND  Student.StudentID = Exam.StudentID AND Exam.Assessment1+Assessment2+Assessment3 <= '150' \n" +
"ORDER BY Student.Student_Name";
            
            PreparedStatement prest = conn.prepareStatement(SQL);
            
            prest.setString(1,input);
            
            ResultSet rs = prest.executeQuery();
            
           
           

            
            
            while  (rs.next()) {
                 {
            
                 list.add(("Student ID "+ rs.getObject(2)+ " " + rs.getObject(1) + " Failed ModuleID = " + rs.getObject(3)));
                 
                
            
            
            }

                
                
            }

            // execute a query

            // close the objects
            rs.close();
            prest.close();
            conn.close();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_StuFailActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdvancedRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdvancedRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdvancedRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdvancedRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdvancedRecords().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton StuCollege;
    private javax.swing.JButton StuCourse;
    private javax.swing.JButton StuFail;
    private javax.swing.JButton StuPass;
    private javax.swing.JButton WExams;
    private javax.swing.JButton closebt;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private java.awt.List list;
    // End of variables declaration//GEN-END:variables
}
